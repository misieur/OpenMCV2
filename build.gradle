plugins {
    id 'java'
    id "com.gradleup.shadow" version "9.0.1"
    id "io.papermc.paperweight.userdev" version "${paperWeightUserDevVersion}"
    id("xyz.jpenilla.run-paper") version "3.0.0" // Will use ${minecraftVersion} for the paper version
}

def getLatestGitTag() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception ignored) {
        return "unknown" // Default value if no tags exist
    }
}

// Versioning
def tag = System.getenv("TAG") ?: getLatestGitTag()
def isSnapshot = System.getenv('SNAPSHOT')?.toBoolean() ?: false
def gitHash = System.getenv('GITHUB_SHA') ?: 'local'

version = isSnapshot ? "$tag-SNAPSHOT-${gitHash.take(7)}" : (System.getenv("TAG") ? tag : "dev-$tag")
group = 'fr.openmc'

repositories {
    mavenCentral()
    maven {
        url "https://maven.devs.beer/"
    }
    maven {
        url "https://repo.fancyinnovations.com/releases"
    }
    maven {
        url "https://maven.enginehub.org/repo/"
    }
    maven {
        url "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        url "https://repo.dmulloy2.net/repository/public/"
    }
    maven {
        url "https://jitpack.io" // Toujours Ã  la fin
    }
}

dependencies {
    paperweight.paperDevBundle "${minecraftVersion}-R0.1-SNAPSHOT"

    compileOnly "com.sk89q.worldguard:worldguard-bukkit:${worldguardVersion}"
    compileOnly "dev.lone:api-itemsadder:${itemsAdderVersion}"
    compileOnly "net.luckperms:api:${luckpermsVersion}"
    compileOnly "me.clip:placeholderapi:${placeholderApiVersion}"
    compileOnly "com.sk89q.worldedit:worldedit-bukkit:${worldeditVersion}"
    compileOnly "de.oliver:FancyNpcs:${fancyNpcsVersion}"
    compileOnly "net.dmulloy2:ProtocolLib:${protocolLibVersion}"

    implementation "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"
    implementation "com.github.Revxrsal.Lamp:common:${revxrsalLampVersion}"
    implementation "com.github.Revxrsal.Lamp:bukkit:${revxrsalLampVersion}"
    implementation "com.j256.ormlite:ormlite-jdbc:${ormVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.mockbukkit.mockbukkit:mockbukkit-v1.21:${mockbukkitVersion}"
    testImplementation "com.h2database:h2:${h2DatabaseVersion}"
}

def targetJavaVersion = 21
java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

paperweight {
  addServerDependencyTo = configurations.named(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME).map { [it] as Set }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = targetJavaVersion
}

processResources {
    filteringCharset = 'UTF-8'

    def pluginProps = ["version": version, "minecraftVersion": minecraftVersion]
    inputs.properties(pluginProps)

    filesMatching('plugin.yml') {
        expand(pluginProps)
    }

    filesMatching('data/motd.yml') {
        expand(pluginProps)
    }
}

tasks.jar {
    manifest {
        attributes 'GIT-COMMIT': gitHash
    }
    destinationDirectory.set(file('./builds/'))
}

tasks.clean {
    delete 'builds'
}

tasks.shadowJar {
    destinationDirectory.set(file('./builds/'))
    archiveFileName.set('OpenMC.jar')

    relocate("org.jetbrains.annotations", "fr.openmc.shaded.org.jetbrains.annotations")
    relocate("org.intellij", "fr.openmc.shaded.org.intellij")
    relocate("revxrsal.commands", "fr.openmc.shaded.revxrsal.commands")
    relocate("com.j256.ormlite", "fr.openmc.shaded.com.j256.ormlite")
}

tasks.test {
    useJUnitPlatform()
}
